{"/home/travis/build/npmtest/node-npmtest-node-datetime/test.js":"/* istanbul instrument in package npmtest_node_datetime */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-datetime/lib.npmtest_node_datetime.js":"/* istanbul instrument in package npmtest_node_datetime */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_datetime = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_datetime = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-datetime/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-datetime && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_datetime */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_datetime\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_datetime.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_datetime.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_datetime.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_datetime.__dirname + '/lib.npmtest_node_datetime.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-datetime/node_modules/node-datetime/index.js":"'use strict';\n\nvar DateTime = require('./src/datetime');\nvar TimedNumber = require('./src/timednumber');\nvar TimedState = require('./src/timedstate');\n\n// global offsets for datetime\nvar offsets = {\n\tdays: 0,\n\thours: 0\n};\n\n// global default format\nvar globalDefaultFormat = null;\n\nexports.setOffsetInDays = function (d) {\n\n\tif (isNaN(d)) {\n\t\tthrow new Error('invalidOffset');\n\t}\n\n\toffsets.days = d;\n};\n\nexports.setOffsetInHours = function (h) {\n\n\tif (isNaN(h)) {\n\t\tthrow new Error('invalidOffset');\n\t}\n\n\toffsets.hours = h;\n};\n\nexports.setDefaultFormat = function (format) {\n\tglobalDefaultFormat = format;\n};\n\nexports.create = function (now, defaultFormat) {\n\n\tif (!defaultFormat && globalDefaultFormat) {\n\t\tdefaultFormat = globalDefaultFormat;\n\t}\n\n\tvar d = new DateTime(now, defaultFormat);\n\n\tif (offsets.days !== 0) {\n\t\td.offsetInDays(offsets.days);\n\t}\n\n\tif (offsets.hours !== 0) {\n\t\td.offsetsInHours(offsets.hours);\n\t}\n\n\treturn d;\n};\n\nexports.createTimedNumber = function (conf) {\n\treturn new TimedNumber(conf);\n};\n\nexports.createTimedState = function (conf) {\n\treturn new TimedState(conf);\n};\n","/home/travis/build/npmtest/node-npmtest-node-datetime/node_modules/node-datetime/src/datetime.js":"'use strict';\n\nvar FORMATS = {\n\ty: getYear,\n\tY: getFullYear,\n\tm: getMonth,\n\tn: getMonthName,\n\tf: getMonthFullName,\n\td: getDay,\n\tH: getMilitaryHours,\n\tI: getHours,\n\tM: getMinutes,\n\tS: getSeconds,\n\tN: getMillisec,\n\tw: getWeekday,\n\tW: getFullWeekday\n};\n\nvar WEEKS = {\n\tABB: [\n\t\t'Sun',\n\t\t'Mon',\n\t\t'Tue',\n\t\t'Wed',\n\t\t'Thu',\n\t\t'Fri',\n\t\t'Sat'\n\t],\n\tFULL: [\n\t\t'Sunday',\n\t\t'Monday',\n\t\t'Tuesday',\n\t\t'Wednesday',\n\t\t'Thursday',\n\t\t'Friday',\n\t\t'Saturday'\n\t]\n};\n\nvar MONTHS = {\n\tABB: [\n\t\t'Jan',\n\t\t'Feb',\n\t\t'Mar',\n\t\t'Apr',\n\t\t'May',\n\t\t'Jun',\n\t\t'Jul',\n\t\t'Aug',\n\t\t'Sep',\n\t\t'Oct',\n\t\t'Nov',\n\t\t'Dec'\n\t],\n\tFULL: [\n\t\t'January',\n\t\t'Feburary',\n\t\t'March',\n\t\t'April',\n\t\t'May',\n\t\t'June',\n\t\t'July',\n\t\t'August',\n\t\t'September',\n\t\t'October',\n\t\t'November',\n\t\t'December'\n\t]\n};\n\nvar ONEDAY = 86400000;\nvar ONEHOUR = 3600000;\n\nfunction DateTime(now, defaultFormat) {\n\tthis._created = Date.now();\n\tthis._now = (now) ? new Date(now) : new Date();\n\tthis._delta = this._created - this._now.getTime();\n\tthis._defaultFormat = defaultFormat || null;\n}\n\nDateTime.prototype.format = function (format) {\n\n\tif (!format && this._defaultFormat) {\n\t\tformat = this._defaultFormat;\n\t}\n\n\tvar str = '';\n\tfor (var i = 0, len = format.length; i < len; i++) {\n\t\tstr += this._convert(format[i]);\n\t}\n\treturn str;\n};\n\nDateTime.prototype.now = function () {\n\treturn Date.now() - this._delta;\n};\n\nDateTime.prototype.epoch = function () {\n\treturn Math.floor(this.getTime() / 1000);\n};\n\nDateTime.prototype.getTime = function () {\n\treturn this._now.getTime();\n};\n\nDateTime.prototype.offsetInDays = function (offset) {\n\tvar next = new Date(this._now);\n\tnext.setDate(next.getDate() + offset);\n\tthis._now = next;\n\tthis._updateDelta();\n};\n\nDateTime.prototype.offsetInHours = function (offset) {\n\tvar next = new Date(this._now);\n\tnext.setHours(next.getHours() + offset);\n\tthis._now = next;\n\tthis._updateDelta();\n};\n\nDateTime.prototype.getDatesInRange = function (dateObj) {\n\n\tif (dateObj instanceof DateTime) {\n\t\tdateObj = dateObj._now;\n\t}\n\n\tif (this.getTime() >= dateObj.getTime()) {\n\t\tthrow new Error('start time cannot be greater than the end time');\n\t}\n\n\tvar list = [];\n\tvar dir = (dateObj.getTime() >= this.getTime()) ? 1 : -1;\n\tvar diff = dateObj.getTime() - this.getTime() * dir;\n\tvar current = new DateTime(this._now);\n\t\n\twhile (diff > 0) {\n\t\tlist.push(current);\n\t\tvar next = new DateTime(current.getTime());\n\t\tnext.offsetInDays(1 * dir);\t\n\t\tcurrent = next;\n\t\tdiff -= ONEDAY;\n\t}\n\n\treturn list;\n};\n\nDateTime.prototype.getHoursInRange = function (dateObj) {\n\n\tif (dateObj instanceof DateTime) {\n\t\tdateObj = dateObj._now;\n\t}\n\n\tif (this._now.getTime() >= dateObj.getTime()) {\n\t\tthrow new Error('start time cannot be greater than the end time');\n\t}\n\n\tvar list = [];\n\tvar dir = (dateObj.getTime() >= this._now.getTime()) ? 1 : -1;\n\tvar diff = dateObj.getTime() - this._now.getTime() * dir;\n\tvar current = new DateTime(this._now);\n\t\n\twhile (diff > 0) {\n\t\tlist.push(current);\n\t\tvar next = new DateTime(current.getTime());\n\t\tnext.offsetInHours(1 * dir);\t\n\t\tcurrent = next;\n\t\tdiff -= ONEHOUR;\n\t}\n\n\treturn list;\n};\n\nDateTime.prototype._convert = function (formatFragment) {\n\tvar converter = FORMATS[formatFragment];\n\n\tif (converter) {\n\t\treturn converter(this._now);\n\t}\n\t\n\t// no converter \n\treturn formatFragment;\n};\n\nDateTime.prototype._updateDelta = function () {\n\tthis._delta = this._created - this._now.getTime();\n};\n\nfunction getYear(d) {\n\tvar year = d.getFullYear().toString();\n\treturn year.substring(year.length - 2);\n}\n\nfunction getFullYear(d) {\n\treturn d.getFullYear();\n}\n\nfunction getMonth(d) {\n\treturn pad(d.getMonth() + 1);\n}\n\nfunction getMonthName(d) {\n\treturn MONTHS.ABB[d.getMonth()];\n}\n\nfunction getMonthFullName(d) {\n\treturn MONTHS.FULL[d.getMonth()];\n}\n\nfunction getDay(d) {\n\treturn pad(d.getDate());\n}\n\nfunction getMilitaryHours(d) {\n\treturn pad(d.getHours());\n}\n\nfunction getHours(d) {\n\tvar h = d.getHours();\n\tvar hours = (h >= 12) ? h - 12 : h; \n\treturn pad(hours);\n}\n\nfunction getMinutes(d) {\n\treturn pad(d.getMinutes());\n}\n\nfunction getSeconds(d) {\n\treturn pad(d.getSeconds());\n}\n\nfunction getMillisec(d) {\n\treturn mpad(d.getMilliseconds());\n}\n\nfunction getWeekday(d) {\n\treturn WEEKS.ABB[d.getDay()];\n}\n\nfunction getFullWeekday(d) {\n\treturn WEEKS.FULL[d.getDay()];\n}\n\nfunction pad(n) {\n\treturn (n < 10) ? '0' + n : n;\n}\n\nfunction mpad(n) {\n\tvar padded = pad(n);\n\treturn (typeof padded === 'string' || padded < 100) ? '0' + padded : padded; \n}\n\nmodule.exports = DateTime;\n","/home/travis/build/npmtest/node-npmtest-node-datetime/node_modules/node-datetime/src/timednumber.js":"'use strict';\n\nvar INC = 'inc';\nvar DEC = 'dec';\n\nmodule.exports = TimedNumber;\n\n/*\nconf: {\n        max: [number],\n        min: [number],\n        interval: [number], // update interval\n        step: [number], // update step e.g. is step = 2, it will inc/dec 2 every interval\n        type: [string], // inc: increment, dec: decrement\n        init: [number], // cannot be greater than max and smaller than min\n\tlastUpdate: [*number] // an optional timestamp to conrtol last update state\n}\n*/\nfunction TimedNumber(conf) {\n\tthis.validate(conf);\n\tthis.conf = conf;\n\tthis.current = this.conf.init;\n\tthis.lastUpdate = this.conf.lastUpdate || Date.now();\n}\n\n// public\nTimedNumber.prototype.getValue = function () {\n\tswitch (this.conf.type) {\n\t\tcase INC:\n\t\t\treturn this.calculateCurrentValueForInc();\n\t\tcase DEC:\n\t\t\treturn this.calculateCurrentValueForDec();\n\t}\n};\n\n// public\nTimedNumber.prototype.inc = function (value) {\n\tif (!value || isNaN(value)) {\n\t\treturn false;\n\t}\n\tif (this.current + value > this.conf.max) {\n\t\treturn false;\n\t}\n\t\n\tif (this.current === this.conf.init) {\n\t\t// initial mod\n\t\tthis.lastUpdate = Date.now();\n\t}\n\n\t// if type is inc, increasing means recovering\n\tthis.current += value;\n\n\tthis.lastUpdate = Date.now();\n\n\treturn true;\n};\n\n// public\nTimedNumber.prototype.dec = function (value) {\n\tif (!value || isNaN(value)) {\n\t\treturn false;\n\t}\n\tif (this.current - value < this.conf.min) {\n\t\treturn false;\n\t}\n\t\n\tif (this.current === this.conf.init) {\n\t\t// initial mod\n\t\tthis.lastUpdate = Date.now();\n\t}\n\t\n\t// if type is dec, decreasing means recovering\n\tthis.current -= value;\n\n\tthis.lastUpdate = Date.now();\n\n\treturn true;\n};\n\n// public\nTimedNumber.prototype.reset = function () {\n\tthis.current = this.conf.init;\n\tthis.lastUpdate = Date.now();\n};\n\n// public\nTimedNumber.prototype.getMaxValue = function () {\n\treturn this.conf.max;\n};\n\n// public\nTimedNumber.prototype.getMinValue = function () {\n\treturn this.conf.min;\n};\n\n// public\nTimedNumber.prototype.getInterval = function () {\n\treturn this.conf.interval;\n};\n\n// public\nTimedNumber.prototype.getStep = function () {\n\treturn this.conf.step;\n};\n\n// public\nTimedNumber.prototype.getLastUpdate = function () {\n\treturn this.lastUpdate;\n};\n\n// public\nTimedNumber.prototype.toObject = function () {\n\tvar obj = {};\n\tobj.current = this.current;\n\tobj.lastUpdate = this.lastUpdate;\n\tfor (var key in this.conf) {\n\t\tobj[key] = this.conf[key];\n\t}\n\treturn obj;\n};\n\n// private\nTimedNumber.prototype.validate = function (conf) {\n\tif (!conf.hasOwnProperty('max') || isNaN(conf.max)) {\n\t\tthrow new Error('invalid max: ' + conf.max);\n\t}\n\tif (!conf.hasOwnProperty('min') || isNaN(conf.min) || conf.min >= conf.max) {\n\t\tthrow new Error('invalid min: ' + conf.min);\n\t}\n\tif (!conf.hasOwnProperty('interval') || isNaN(conf.interval) || conf.interval <= 0) {\n\t\tthrow new Error('invalid interval: ' + conf.interval);\n\t}\n\tif (!conf.hasOwnProperty('type') || (conf.type !== INC && conf.type !== DEC)) {\n\t\tthrow new Error('invalid type: ' + conf.type);\n\t}\n\tif (!conf.hasOwnProperty('init') || isNaN(conf.init) || conf.init <= 0) {\n\t\tthrow new Error('invalid init: ' + conf.init);\n\t}\n\tif (!conf.hasOwnProperty('step') || isNaN(conf.step) || conf.step <= 0) {\n\t\tthrow new Error('invalid step: ' + conf.step);\n\t}\n\tif (conf.type === INC && conf.step > conf.max) {\n\t\tthrow new Error('step must not be greater than max');\n\t}\n\tif (conf.type === DEC && conf.step < conf.min) {\n\t\tthrow new Error('step must not be smaller than min');\n\t}\n};\n\n// private\nTimedNumber.prototype.calculateCurrentValueForInc = function () {\n\tif (this.current === this.conf.max) {\n\t\treturn this.current;\n\t}\n\tvar now = Date.now();\n\tvar timePast = now - this.lastUpdate;\n\tvar steps = Math.floor(timePast / this.conf.interval);\n\tvar incValue = this.conf.step * steps;\n\tthis.current = (this.current + incValue <= this.conf.max) ? this.current + incValue : this.conf.max;\n\tif (incValue) {\n\t\tthis.lastUpdate = now;\n\t}\n\treturn this.current;\n};\n\n// private\nTimedNumber.prototype.calculateCurrentValueForDec = function () {\n\tif (this.current === this.conf.min) {\n\t\treturn this.current;\n\t}\n\tvar now = Date.now();\n\tvar timePast = now - this.lastUpdate;\n\tvar steps = Math.floor(timePast / this.conf.interval);\n\tvar decValue = this.conf.step * steps;\t\n\tthis.current = (this.current - decValue >= this.conf.min) ? this.current - decValue : this.conf.min;\n\tif (decValue) {\n\t\tthis.lastUpdate = now;\n\t}\n\treturn this.current;\n};\n","/home/travis/build/npmtest/node-npmtest-node-datetime/node_modules/node-datetime/src/timedstate.js":"'use strict';\n\nmodule.exports = TimedState;\n\n/*\nconf: {\n\tstates: [array], // an array of states\n        interval: [number], // update interval\n        init: [number], // initial index of states array to start with\n\tlastUpdate: [*number] // an optional timestamp to conrtol last update state\n\tloop: [*bool] // if true the progress of states will be a loop\n}\n*/\nfunction TimedState(conf) {\n\tthis.validate(conf);\n\tthis.conf = conf;\n\tthis.length = this.conf.states.length;\n\tthis.current = this.conf.init;\n\tthis.lastUpdate = this.conf.lastUpdate || Date.now();\n}\n\n// public\nTimedState.prototype.getState = function () {\n\tvar now = Date.now();\n\tvar timePast = now - this.lastUpdate;\n\tvar steps = Math.floor(timePast / this.conf.interval);\n\tvar nextPos = steps + this.current;\t\n\n\tif (nextPos >= this.length) {\n\t\tif (this.conf.loop) {\n\t\t\tnextPos = (steps + this.current) - (this.length);\t\n\t\t} else {\n\t\t\t// we don't loop and stop at the end of the state\n\t\t\tnextPos = this.length - 1;\n\t\t}\n\t}\n\n\treturn this.conf.states[nextPos];\n};\n\n// public\nTimedState.prototype.forward = function (value) {\n\tif (!value) {\n\t\t// if value is not given it defaults  to 1\n\t\tvalue = 1;\n\t}\n\tif (!value || isNaN(value)) {\n\t\treturn false;\n\t}\n\tif (this.current + value >= this.length) {\n\t\treturn false;\n\t}\n\t\n\tif (this.current === this.conf.init) {\n\t\t// initial mod\n\t\tthis.lastUpdate = Date.now();\n\t}\n\n\t// move the current cursor of the array index forward\n\tthis.current += value;\n\n\tthis.lastUpdate = Date.now();\n\n\treturn true;\n};\n\n// public\nTimedState.prototype.backward = function (value) {\n\tif (!value) {\n\t\t// if value is not given it defaults  to 1\n\t\tvalue = 1;\n\t}\n\tif (!value || isNaN(value)) {\n\t\treturn false;\n\t}\n\tif (this.current - value < 0) {\n\t\treturn false;\n\t}\n\t\n\tif (this.current === this.conf.init) {\n\t\t// initial mod\n\t\tthis.lastUpdate = Date.now();\n\t}\n\t\n\t// move the current cursor of the array index backward\n\tthis.current -= value;\n\n\tthis.lastUpdate = Date.now();\n\n\treturn true;\n};\n\n// public\nTimedState.prototype.reset = function () {\n\tthis.current = this.conf.init;\n\tthis.lastUpdate = Date.now();\n};\n\n// public\nTimedState.prototype.getStates = function () {\n\treturn this.conf.states.map(function (elm) {\n\t\treturn elm;\n\t});\n};\n\n// public\nTimedState.prototype.getInterval = function () {\n\treturn this.conf.interval;\n};\n\n// public\nTimedState.prototype.getLastUpdate = function () {\n\treturn this.lastUpdate;\n};\n\n// public\nTimedState.prototype.toObject = function () {\n\tvar obj = {};\n\tobj.current = this.current;\n\tobj.lastUpdate = this.lastUpdate;\n\tfor (var key in this.conf) {\n\t\tobj[key] = this.conf[key];\n\t}\n\treturn obj;\n};\n\n// private\nTimedState.prototype.validate = function (conf) {\n\tif (!conf.hasOwnProperty('states') || !Array.isArray(conf.states) || conf.states.length === 0) {\n\t\tthrow new Error('invalid states: ' + conf.states);\n\t}\n\tif (!conf.hasOwnProperty('interval') || isNaN(conf.interval) || conf.interval <= 0) {\n\t\tthrow new Error('invalid interval: ' + conf.interval);\n\t}\n\tif (!conf.hasOwnProperty('init') || isNaN(conf.init) || conf.init < 0) {\n\t\tthrow new Error('invalid init: ' + conf.init);\n\t}\n};\n"}